--select max(name) from animals;

--select * from animals limit 10;

-- select * from animals where species = 'orangutan' order by birthdate;

-- select name from animals where species = 'orangutan' order by birthdate desc;

-- select name, birthdate from animals order by name limit 10 offset 20;

select species, min(birthdate) from animals group by species;

-- select name, count(*) as num from animals
-- group by name
-- order by num desc
-- limit 5;

--select species, count(*) as 'number' from animals
--group by species
--order by number desc;

--select animals.name from animals join diet
--on animals.species = diet.species
--where diet.food = 'fish';

--select diet.food from animals join diet
--on animals.species = diet.species
--group by diet.food
--having count(*) = 1;

--select ordernames.name, count(*) as num from ordernames, taxonomy, animals
--where ordernames.t_order = taxonomy.t_order
--and animals.species = taxonomy.name
--group by ordernames.name
--order by num desc

--select a.id, b.id, a.building, a.room
--       from residences as a, residences as b
-- where a.building = b.building
--   and a.room = b.room
-- order by a.building, a.room;


#def lightweights(cursor):
#    """Returns a list of the players in the db whose weight is less than the average."""
#    cursor.execute("select name, weight from players where weight < (select avg(weight) as av from players);")
#   return cursor.fetchall()


notes
where is a restriction on the source table
having is a restriction on the result .... after aggregation!


Rules for normalized tables:
1. Every row has the same number of columns.
In practice, the database system won't let us literally have different numbers of columns in different rows. But if we have columns that are sometimes empty (null) and sometimes not, or if we stuff multiple values into a single field, we're bending this rule.

The example to keep in mind here is the diet table from the zoo database. Instead of trying to stuff multiple foods for a species into a single row about that species, we separate them out. This makes it much easier to do aggregations and comparisons.

2. There is a unique key and everything in a row says something about the key.
The key may be one column or more than one. It may even be the whole row, as in the diet table. But we don't have duplicate rows in a table.

More importantly, if we are storing non-unique facts ? such as people's names ? we distinguish them using a unique identifier such as a serial number. This makes sure that we don't combine two people's grades or parking tickets just because they have the same name.

3. Facts that don't relate to the key belong in different tables.
The example here was the items table, which had items, their locations, and the location's street addresses in it. The address isn't a fact about the item; it's a fact about the location. Moving it to a separate table saves space and reduces ambiguity, and we can always reconstitute the original table using a join.

4. Tables shouldn't imply relationships that don't exist.
The example here was the job_skills table, where a single row listed one of a person's technology skills (like 'Linux') and one of their language skills (like 'French'). This made it look like their Linux knowledge was specific to French, or vice versa ... when that isn't the case in the real world. Normalizing this involved splitting the tech skills and job skills into separate tables.



Um, so what?s a left join?
SQL supports a number of variations on the theme of joins. The kind of join that you have seen earlier in this course is called an inner join, and it is the most common kind of join ? so common that SQL doesn?t actually make us say "inner join" to do one.

But the second most common is the left join, and its mirror-image partner, the right join. The words ?left? and ?right? refer to the tables to the left and right of the join operator. (Above, the left table is products and the right table is sales.)

A regular (inner) join returns only those rows where the two tables have entries matching the join condition. A left join returns all those rows, plus the rows where the left table has an entry but the right table doesn?t. And a right join does the same but for the right table.

(Just as ?join? is short for ?inner join?, so too is ?left join? actually short for ?left outer join?. But SQL lets us just say ?left join?, which is a lot less typing. So we?ll do that.)


http://www.postgresql.org/docs/9.4/static/sql-expressions.html#SQL-SYNTAX-SCALAR-SUBQUERIES

http://www.postgresql.org/docs/9.4/static/functions-subquery.html

http://www.postgresql.org/docs/9.4/static/sql-select.html#SQL-FROM